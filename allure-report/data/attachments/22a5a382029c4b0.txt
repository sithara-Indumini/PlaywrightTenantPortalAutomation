# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Test 3
- Location: C:\WorkDirectory\tests\Chapter04\02_ReRunFailed_Test.spec.ts:32:5

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: false
Received: true
    at C:\WorkDirectory\tests\Chapter04\02_ReRunFailed_Test.spec.ts:33:18
```

# Test source

```ts
   1 | // Import playwright module
   2 | import { test, expect } from '@playwright/test';
   3 |
   4 | /**
   5 |  * Author Testers Talk
   6 |  */
   7 | test('Test 1', async ({ page }) => {
   8 |     // Go to URL
   9 |     await page.goto('https://www.google.com/');
  10 |
  11 |     // Search with keywords
  12 |     await page.getByLabel('Search', { exact: true }).fill('playwright by testers talk');
  13 |     await page.getByLabel('Search', { exact: true }).press('Enter');
  14 |
  15 |     // Click on playlist
  16 |     await page.getByRole('link', { name: 'Playwright by Testers Talk☑️' }).first().click();
  17 |
  18 |     // Validate web page title 
  19 |     await expect(page).toHaveTitle('Playwright by Testers Talk☑️ - YouTube');
  20 | });
  21 |
  22 | /**
  23 |  * Author Testers Talk
  24 |  */
  25 | test('Test 2', async ({ page }) => {
  26 |    expect(true).toBe(false);
  27 | });
  28 |
  29 | /**
  30 |  * Author Testers Talk
  31 |  */
  32 | test('Test 3', async ({ page }) => {
> 33 |     expect(true).toBe(false);
     |                  ^ Error: expect(received).toBe(expected) // Object.is equality
  34 | });
```