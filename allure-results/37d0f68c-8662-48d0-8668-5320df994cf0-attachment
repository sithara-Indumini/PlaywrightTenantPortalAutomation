# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Verify that user can log in to the tenant portal with valid credentials
- Location: C:\TenantPortalWorkDirectory\tests\Login\TC_001.spec.ts:42:5

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: "Login Page1"
Received: "Login Page"
    at C:\TenantPortalWorkDirectory\tests\Login\TC_001.spec.ts:46:31
```

# Page snapshot

```yaml
- link "Fork me on GitHub":
  - img "Fork me on GitHub"
- heading "Login Page" [level=2]
- heading "This is where you can log into the secure area. Enter tomsmith for the username and SuperSecretPassword! for the password. If the information is wrong you should see error messages." [level=4]:
  - text: This is where you can log into the secure area. Enter
  - emphasis: tomsmith
  - text: for the username and
  - emphasis: SuperSecretPassword!
  - text: for the password. If the information is wrong you should see error messages.
- text: Username
- textbox "Username"
- text: Password
- textbox "Password"
- button " Login"
- separator
- text: Powered by
- link "Elemental Selenium"
```

# Test source

```ts
   1 | // //Import the playwright module
   2 | // import { test, expect } from '@playwright/test';
   3 |
   4 | // //Write a test
   5 | // test('Verify that user able to login to the tenant portal with valid credentials', async ({ page }) => {
   6 |
   7 | //     // Navigate to the login page
   8 | //     await page.goto('http://the-internet.herokuapp.com/login');
   9 |
  10 | //     const headingText = await page.locator('xpath=//*[@id="content"]/div/h2').textContent();
  11 |
  12 | //     if (headingText?.trim() === 'Login Page1') {
  13 | //         console.log('✅ Useer Navigate to Tenant Portal URL');
  14 | //     } else {
  15 | //         console.log('❌ Test case failed: Text does not match');
  16 | //         console.log('Found text:', headingText);
  17 | //     }
  18 |
  19 | //     // Adding user name and password
  20 | //     await test.step('Enter User name and password', async () => {
  21 | //         await page.getByRole('textbox', { name: 'username' }).fill('tomsmith');
  22 | //         await page.getByRole('textbox', { name: 'password' }).fill('SuperSecretPassword!');
  23 |
  24 | //         await test.step('Verify Login and success message', async () => {
  25 | //             await page.click('button:has-text("Login")')
  26 | //             const message = await page.locator('.flash.success').textContent();
  27 |
  28 | //             if (message?.includes('You logged into a secure area1!')) {
  29 | //                 console.log('✅ Test passed: Logged in successfully with success message');
  30 | //             } else {
  31 | //                 console.log('❌ Test failed: Success message not found');
  32 | //             }
  33 |
  34 | //         });
  35 |
  36 | //     })
  37 | // })
  38 |
  39 |
  40 | import { test, expect } from '@playwright/test';
  41 |
  42 | test('Verify that user can log in to the tenant portal with valid credentials', async ({ page }) => {
  43 |   await page.goto('http://the-internet.herokuapp.com/login');
  44 |
  45 |   const headingText = await page.locator('xpath=//*[@id="content"]/div/h2').textContent();
> 46 |   expect(headingText?.trim()).toBe('Login Page1'); // ✅ Will fail test if not matched
     |                               ^ Error: expect(received).toBe(expected) // Object.is equality
  47 |
  48 |   await test.step('Enter username and password', async () => {
  49 |     await page.getByRole('textbox', { name: 'username' }).fill('tomsmith');
  50 |     await page.getByRole('textbox', { name: 'password' }).fill('SuperSecretPassword!');
  51 |
  52 |     await test.step('Verify login and success message', async () => {
  53 |       await page.click('button:has-text("Login")');
  54 |       const message = await page.locator('.flash.success').textContent();
  55 |       expect(message).toContain('You logged into a secure area1!'); // ✅ Will fail test if not matched
  56 |     });
  57 |   });
  58 | });
  59 |
```